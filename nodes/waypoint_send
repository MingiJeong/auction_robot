#!/usr/bin/env python


# import of relevant libraries
import rospy # module for ROS APIs
from geometry_msgs.msg import Polygon, PolygonStamped, Point32
from std_msgs.msg import Bool

# import custom modules
from auction_robot_pkg.aux_function import random_point_generator
from auction_robot_pkg.auction_robot_super import DEFAULT_WP_TOPIC, RATE, DEFAULT_WORLD_FRAME, DEFAULT_FLUSH_OUT_TOPIC

def waypoint_generator(x1, y1, x2, y2, x3, y3):
    """
    function to generate waypoint message(type: PolygonStamped) for auctioneer's task (a)
    """
    wp_msg = PolygonStamped()
    wp_msg.header.frame_id = DEFAULT_WORLD_FRAME
    wp_msg.polygon.points = [
        Point32(x=x1, y=y1),
        Point32(x=x2, y=y2),
        Point32(x=x3, y=y3)
    ]
    return wp_msg


def flush_out_call_back(msg):
    """
    function to flush out the waypoint send node (shutdown) after robots reached destinations
    """
    if msg.data: # flushout True
        # rospy.loginfo("Robots achieved tasks and shutdown for this node")
        rospy.signal_shutdown("Robots achieved tasks and shutdown for this node")


def main():
    """ Main function """
    """ waypoint generator by user input and publish through ROS message of type "Polygon" """

    # initialization of node
    rospy.init_node("waypoint_send")

    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    # setting up publishers/subscribers 
    waypoint_publisher = rospy.Publisher(DEFAULT_WP_TOPIC, PolygonStamped, queue_size=1)
    flush_out_subscriber = rospy.Subscriber(DEFAULT_FLUSH_OUT_TOPIC, Bool, flush_out_call_back, queue_size=10)
    rate = rospy.Rate(RATE)

    # receive waypoints passed by ros param
    # x1 = rospy.get_param('~x1')
    # y1 = rospy.get_param('~y1')
    # x2 = rospy.get_param('~x2')
    # y2 = rospy.get_param('~y2')
    # x3 = rospy.get_param('~x3')
    # y3 = rospy.get_param('~y3')
    point_total = rospy.get_param('~point_total')
    print("point total {}".format(point_total))

    # random waypoint generator
    # TODO robust with more than 3
    x1, y1, x2, y2, x3, y3 = random_point_generator(point_total)

    print("random point {}".format([x1, y1, x2, y2, x3, y3]))

    # polygon message for 3 robots
    wp_msg = waypoint_generator(x1, y1, x2, y2, x3, y3)

    # start publish
    try:
        while not rospy.is_shutdown():
            waypoint_publisher.publish(wp_msg)
            rate.sleep()

    except rospy.ROSInterruptException as e:
        rospy.logerr("ROS node interrupted: {}".format(e))

if __name__ == "__main__":
    """Run the main function."""
    main()
